import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import br.utfpr.bankapi.service.AccountService;
import br.utfpr.bankapi.model.Account;
import br.utfpr.bankapi.repository.AccountRepository;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class AccountServiceTest {

    @InjectMocks
    private AccountService accountService;

    @Mock
    private AccountRepository accountRepository;

    private Account account;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
        account = new Account();
        account.setId(1L);
        account.setBalance(1000.0);
    }

    @Test
    public void testGetByNumber() {
        when(accountRepository.findByNumber("123456")).thenReturn(Optional.of(account));
        Account result = accountService.getByNumber("123456");
        assertNotNull(result);
        assertEquals("123456", result.getNumber());
    }

    @Test
    public void testGetAll() {
        Account anotherAccount = new Account();
        anotherAccount.setId(2L);
        anotherAccount.setBalance(2000.0);
        List<Account> accounts = Arrays.asList(account, anotherAccount);
        when(accountRepository.findAll()).thenReturn(accounts);

        List<Account> results = accountService.getAll();
        assertEquals(2, results.size());
    }

    @Test
    public void testSave() {
        when(accountRepository.save(any(Account.class))).thenReturn(account);
        Account savedAccount = accountService.save(new Account());
        assertNotNull(savedAccount);
    }

    @Test
    public void testUpdate() {
        Account updatedAccount = new Account();
        updatedAccount.setId(1L);
        updatedAccount.setBalance(1500.0);

        when(accountRepository.save(any(Account.class))).thenReturn(updatedAccount);
        Account result = accountService.update(updatedAccount);
        assertEquals(1500.0, result.getBalance());
    }
}
