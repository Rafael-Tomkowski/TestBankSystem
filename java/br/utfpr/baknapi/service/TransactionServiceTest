import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import br.utfpr.bankapi.service.TransactionService;
import br.utfpr.bankapi.model.Account;
import br.utfpr.bankapi.repository.AccountRepository;

public class TransactionServiceTest {

    @InjectMocks
    private TransactionService transactionService;

    @Mock
    private AccountRepository accountRepository;

    private Account account;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
        account = new Account();
        account.setId(1L);
        account.setBalance(1000.0);
    }

    @Test
    public void testWithdraw_Success() {
        when(accountRepository.findById(1L)).thenReturn(java.util.Optional.of(account));
        assertDoesNotThrow(() -> transactionService.withdraw(1L, 500.0));
        assertEquals(500.0, account.getBalance());
    }

    @Test
    public void testWithdraw_Failure_InsufficientFunds() {
        when(accountRepository.findById(1L)).thenReturn(java.util.Optional.of(account));
        Exception exception = assertThrows(RuntimeException.class, () -> {
            transactionService.withdraw(1L, 1500.0);
        });
        assertEquals("Insufficient funds", exception.getMessage());
    }

    @Test
    public void testTransfer_Success() {
        Account destination = new Account();
        destination.setId(2L);
        destination.setBalance(500.0);

        when(accountRepository.findById(1L)).thenReturn(java.util.Optional.of(account));
        when(accountRepository.findById(2L)).thenReturn(java.util.Optional.of(destination));

        assertDoesNotThrow(() -> transactionService.transfer(1L, 2L, 200.0));
        assertEquals(800.0, account.getBalance());
        assertEquals(700.0, destination.getBalance());
    }

    @Test
    public void testTransfer_Failure_InsufficientFunds() {
        Account destination = new Account();
        destination.setId(2L);
        destination.setBalance(500.0);

        when(accountRepository.findById(1L)).thenReturn(java.util.Optional.of(account));
        when(accountRepository.findById(2L)).thenReturn(java.util.Optional.of(destination));

        Exception exception = assertThrows(RuntimeException.class, () -> {
            transactionService.transfer(1L, 2L, 1200.0);
        });
        assertEquals("Insufficient funds", exception.getMessage());
    }
}
